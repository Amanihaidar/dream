//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return Success
     */
    user(): Promise<User[]> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }
}

export class Active implements IActive {
    activeId?: number;
    isActive?: boolean | undefined;
    employers?: Employer[] | undefined;
    tenants?: Tenant[] | undefined;
    users?: User[] | undefined;

    constructor(data?: IActive) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.activeId = _data["activeId"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["employers"])) {
                this.employers = [] as any;
                for (let item of _data["employers"])
                    this.employers!.push(Employer.fromJS(item));
            }
            if (Array.isArray(_data["tenants"])) {
                this.tenants = [] as any;
                for (let item of _data["tenants"])
                    this.tenants!.push(Tenant.fromJS(item));
            }
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Active {
        data = typeof data === 'object' ? data : {};
        let result = new Active();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activeId"] = this.activeId;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.employers)) {
            data["employers"] = [];
            for (let item of this.employers)
                data["employers"].push(item.toJSON());
        }
        if (Array.isArray(this.tenants)) {
            data["tenants"] = [];
            for (let item of this.tenants)
                data["tenants"].push(item.toJSON());
        }
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface IActive {
    activeId?: number;
    isActive?: boolean | undefined;
    employers?: Employer[] | undefined;
    tenants?: Tenant[] | undefined;
    users?: User[] | undefined;
}

export class Brand implements IBrand {
    brandId?: number;
    brandName?: string | undefined;
    categories?: Category[] | undefined;
    orders?: Order[] | undefined;
    products?: Product[] | undefined;

    constructor(data?: IBrand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brandId = _data["brandId"];
            this.brandName = _data["brandName"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(Category.fromJS(item));
            }
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Brand {
        data = typeof data === 'object' ? data : {};
        let result = new Brand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandId"] = this.brandId;
        data["brandName"] = this.brandName;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBrand {
    brandId?: number;
    brandName?: string | undefined;
    categories?: Category[] | undefined;
    orders?: Order[] | undefined;
    products?: Product[] | undefined;
}

export class Category implements ICategory {
    categoryId?: number;
    categoryName?: string | undefined;
    brandId?: number;
    productId?: number;
    productTypeId?: number;
    brand?: Brand;
    product?: Product;
    productType?: ProductType;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.brandId = _data["brandId"];
            this.productId = _data["productId"];
            this.productTypeId = _data["productTypeId"];
            this.brand = _data["brand"] ? Brand.fromJS(_data["brand"]) : <any>undefined;
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
            this.productType = _data["productType"] ? ProductType.fromJS(_data["productType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["brandId"] = this.brandId;
        data["productId"] = this.productId;
        data["productTypeId"] = this.productTypeId;
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["productType"] = this.productType ? this.productType.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategory {
    categoryId?: number;
    categoryName?: string | undefined;
    brandId?: number;
    productId?: number;
    productTypeId?: number;
    brand?: Brand;
    product?: Product;
    productType?: ProductType;
}

export class Employer implements IEmployer {
    employerId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    activeId?: number;
    storeId?: number;
    roleId?: number;
    employerAge?: number;
    active?: Active;
    orders?: Order[] | undefined;

    constructor(data?: IEmployer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employerId = _data["employerId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.activeId = _data["activeId"];
            this.storeId = _data["storeId"];
            this.roleId = _data["roleId"];
            this.employerAge = _data["employerAge"];
            this.active = _data["active"] ? Active.fromJS(_data["active"]) : <any>undefined;
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Employer {
        data = typeof data === 'object' ? data : {};
        let result = new Employer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employerId"] = this.employerId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["activeId"] = this.activeId;
        data["storeId"] = this.storeId;
        data["roleId"] = this.roleId;
        data["employerAge"] = this.employerAge;
        data["active"] = this.active ? this.active.toJSON() : <any>undefined;
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEmployer {
    employerId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    activeId?: number;
    storeId?: number;
    roleId?: number;
    employerAge?: number;
    active?: Active;
    orders?: Order[] | undefined;
}

export class Order implements IOrder {
    orderId?: number;
    userId?: number;
    orderStatus?: string | undefined;
    orderDate?: number;
    requiredDate?: number;
    storeId?: number;
    employerId?: number;
    productId?: number;
    brandId?: number;
    orderItemId?: number;
    brand?: Brand;
    employer?: Employer;
    orderItem?: OrderItem;
    orderItems?: OrderItem[] | undefined;
    product?: Product;
    user?: User;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.userId = _data["userId"];
            this.orderStatus = _data["orderStatus"];
            this.orderDate = _data["orderDate"];
            this.requiredDate = _data["requiredDate"];
            this.storeId = _data["storeId"];
            this.employerId = _data["employerId"];
            this.productId = _data["productId"];
            this.brandId = _data["brandId"];
            this.orderItemId = _data["orderItemId"];
            this.brand = _data["brand"] ? Brand.fromJS(_data["brand"]) : <any>undefined;
            this.employer = _data["employer"] ? Employer.fromJS(_data["employer"]) : <any>undefined;
            this.orderItem = _data["orderItem"] ? OrderItem.fromJS(_data["orderItem"]) : <any>undefined;
            if (Array.isArray(_data["orderItems"])) {
                this.orderItems = [] as any;
                for (let item of _data["orderItems"])
                    this.orderItems!.push(OrderItem.fromJS(item));
            }
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["userId"] = this.userId;
        data["orderStatus"] = this.orderStatus;
        data["orderDate"] = this.orderDate;
        data["requiredDate"] = this.requiredDate;
        data["storeId"] = this.storeId;
        data["employerId"] = this.employerId;
        data["productId"] = this.productId;
        data["brandId"] = this.brandId;
        data["orderItemId"] = this.orderItemId;
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        data["employer"] = this.employer ? this.employer.toJSON() : <any>undefined;
        data["orderItem"] = this.orderItem ? this.orderItem.toJSON() : <any>undefined;
        if (Array.isArray(this.orderItems)) {
            data["orderItems"] = [];
            for (let item of this.orderItems)
                data["orderItems"].push(item.toJSON());
        }
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrder {
    orderId?: number;
    userId?: number;
    orderStatus?: string | undefined;
    orderDate?: number;
    requiredDate?: number;
    storeId?: number;
    employerId?: number;
    productId?: number;
    brandId?: number;
    orderItemId?: number;
    brand?: Brand;
    employer?: Employer;
    orderItem?: OrderItem;
    orderItems?: OrderItem[] | undefined;
    product?: Product;
    user?: User;
}

export class OrderItem implements IOrderItem {
    orderItemId?: number;
    orderId?: number;
    productId?: number;
    quantity?: number;
    listPrice?: number;
    discount?: number;
    brandId?: number;
    productTypeId?: number;
    order?: Order;
    orders?: Order[] | undefined;
    product?: Product;
    productType?: ProductType;

    constructor(data?: IOrderItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderItemId = _data["orderItemId"];
            this.orderId = _data["orderId"];
            this.productId = _data["productId"];
            this.quantity = _data["quantity"];
            this.listPrice = _data["listPrice"];
            this.discount = _data["discount"];
            this.brandId = _data["brandId"];
            this.productTypeId = _data["productTypeId"];
            this.order = _data["order"] ? Order.fromJS(_data["order"]) : <any>undefined;
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
            this.productType = _data["productType"] ? ProductType.fromJS(_data["productType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderItem {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderItemId"] = this.orderItemId;
        data["orderId"] = this.orderId;
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["listPrice"] = this.listPrice;
        data["discount"] = this.discount;
        data["brandId"] = this.brandId;
        data["productTypeId"] = this.productTypeId;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["productType"] = this.productType ? this.productType.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrderItem {
    orderItemId?: number;
    orderId?: number;
    productId?: number;
    quantity?: number;
    listPrice?: number;
    discount?: number;
    brandId?: number;
    productTypeId?: number;
    order?: Order;
    orders?: Order[] | undefined;
    product?: Product;
    productType?: ProductType;
}

export class Product implements IProduct {
    productId?: number;
    productName?: string | undefined;
    listPrice?: number;
    brandId?: number;
    categoryId?: number;
    modelYear?: number;
    productTypeId?: number;
    brand?: Brand;
    categories?: Category[] | undefined;
    orderItems?: OrderItem[] | undefined;
    orders?: Order[] | undefined;
    stocks?: Stock[] | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.listPrice = _data["listPrice"];
            this.brandId = _data["brandId"];
            this.categoryId = _data["categoryId"];
            this.modelYear = _data["modelYear"];
            this.productTypeId = _data["productTypeId"];
            this.brand = _data["brand"] ? Brand.fromJS(_data["brand"]) : <any>undefined;
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(Category.fromJS(item));
            }
            if (Array.isArray(_data["orderItems"])) {
                this.orderItems = [] as any;
                for (let item of _data["orderItems"])
                    this.orderItems!.push(OrderItem.fromJS(item));
            }
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
            if (Array.isArray(_data["stocks"])) {
                this.stocks = [] as any;
                for (let item of _data["stocks"])
                    this.stocks!.push(Stock.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["listPrice"] = this.listPrice;
        data["brandId"] = this.brandId;
        data["categoryId"] = this.categoryId;
        data["modelYear"] = this.modelYear;
        data["productTypeId"] = this.productTypeId;
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.orderItems)) {
            data["orderItems"] = [];
            for (let item of this.orderItems)
                data["orderItems"].push(item.toJSON());
        }
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        if (Array.isArray(this.stocks)) {
            data["stocks"] = [];
            for (let item of this.stocks)
                data["stocks"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProduct {
    productId?: number;
    productName?: string | undefined;
    listPrice?: number;
    brandId?: number;
    categoryId?: number;
    modelYear?: number;
    productTypeId?: number;
    brand?: Brand;
    categories?: Category[] | undefined;
    orderItems?: OrderItem[] | undefined;
    orders?: Order[] | undefined;
    stocks?: Stock[] | undefined;
}

export class ProductType implements IProductType {
    productTypeId?: number;
    skinProduct?: boolean;
    perfumeProduct?: boolean;
    categories?: Category[] | undefined;
    orderItems?: OrderItem[] | undefined;

    constructor(data?: IProductType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productTypeId = _data["productTypeId"];
            this.skinProduct = _data["skinProduct"];
            this.perfumeProduct = _data["perfumeProduct"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(Category.fromJS(item));
            }
            if (Array.isArray(_data["orderItems"])) {
                this.orderItems = [] as any;
                for (let item of _data["orderItems"])
                    this.orderItems!.push(OrderItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductType {
        data = typeof data === 'object' ? data : {};
        let result = new ProductType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productTypeId"] = this.productTypeId;
        data["skinProduct"] = this.skinProduct;
        data["perfumeProduct"] = this.perfumeProduct;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.orderItems)) {
            data["orderItems"] = [];
            for (let item of this.orderItems)
                data["orderItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductType {
    productTypeId?: number;
    skinProduct?: boolean;
    perfumeProduct?: boolean;
    categories?: Category[] | undefined;
    orderItems?: OrderItem[] | undefined;
}

export class Role implements IRole {
    roleId?: number;
    user?: number;
    employer?: number;
    users?: User[] | undefined;

    constructor(data?: IRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.user = _data["user"];
            this.employer = _data["employer"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Role {
        data = typeof data === 'object' ? data : {};
        let result = new Role();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["user"] = this.user;
        data["employer"] = this.employer;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRole {
    roleId?: number;
    user?: number;
    employer?: number;
    users?: User[] | undefined;
}

export class Stock implements IStock {
    stockId?: number;
    productId?: number;
    quantity?: number;
    product?: Product;

    constructor(data?: IStock) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stockId = _data["stockId"];
            this.productId = _data["productId"];
            this.quantity = _data["quantity"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Stock {
        data = typeof data === 'object' ? data : {};
        let result = new Stock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stockId"] = this.stockId;
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data;
    }
}

export interface IStock {
    stockId?: number;
    productId?: number;
    quantity?: number;
    product?: Product;
}

export class Tenant implements ITenant {
    tenantId?: number;
    name?: string | undefined;
    activeId?: number;
    tenantDate?: number;
    tenantOwner?: string | undefined;
    active?: Active;
    users?: User[] | undefined;

    constructor(data?: ITenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.activeId = _data["activeId"];
            this.tenantDate = _data["tenantDate"];
            this.tenantOwner = _data["tenantOwner"];
            this.active = _data["active"] ? Active.fromJS(_data["active"]) : <any>undefined;
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Tenant {
        data = typeof data === 'object' ? data : {};
        let result = new Tenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["activeId"] = this.activeId;
        data["tenantDate"] = this.tenantDate;
        data["tenantOwner"] = this.tenantOwner;
        data["active"] = this.active ? this.active.toJSON() : <any>undefined;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITenant {
    tenantId?: number;
    name?: string | undefined;
    activeId?: number;
    tenantDate?: number;
    tenantOwner?: string | undefined;
    active?: Active;
    users?: User[] | undefined;
}

export class User implements IUser {
    userId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    activeId?: number;
    phone?: number;
    email?: string | undefined;
    password?: string | undefined;
    roleId?: number;
    tenantId?: number;
    active?: Active;
    orders?: Order[] | undefined;
    role?: Role;
    tenant?: Tenant;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.activeId = _data["activeId"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.roleId = _data["roleId"];
            this.tenantId = _data["tenantId"];
            this.active = _data["active"] ? Active.fromJS(_data["active"]) : <any>undefined;
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(Order.fromJS(item));
            }
            this.role = _data["role"] ? Role.fromJS(_data["role"]) : <any>undefined;
            this.tenant = _data["tenant"] ? Tenant.fromJS(_data["tenant"]) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["activeId"] = this.activeId;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["password"] = this.password;
        data["roleId"] = this.roleId;
        data["tenantId"] = this.tenantId;
        data["active"] = this.active ? this.active.toJSON() : <any>undefined;
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUser {
    userId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    activeId?: number;
    phone?: number;
    email?: string | undefined;
    password?: string | undefined;
    roleId?: number;
    tenantId?: number;
    active?: Active;
    orders?: Order[] | undefined;
    role?: Role;
    tenant?: Tenant;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}